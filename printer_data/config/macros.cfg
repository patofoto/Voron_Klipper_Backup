#####################################################################
#   Macros
#####################################################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 320.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 5.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 0.6   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 0.7   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 7200  ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
## Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "_DEMON_PAUSE"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "_DEMON_RESUME"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "_DEMON_CANCEL"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    UNLOAD_FILAMENT
    # G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state    



# [gcode_macro LOAD_FILAMENT]
# variable_load_distance:  100
# variable_purge_distance:  25
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
#     SAVE_GCODE_STATE NAME=load_state
#     G91
#     G92 E0
#     G1 E{load_distance} F{max_velocity} # fast-load
#     G1 E{purge_distance} F{speed} # purge
#     RESTORE_GCODE_STATE NAME=load_state

# [gcode_macro UNLOAD_FILAMENT]
# variable_unload_distance:  100
# variable_purge_distance:  25
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
#     SAVE_GCODE_STATE NAME=unload_state
#     G91
#     G92 E0
#     G1 E{purge_distance} F{speed} # purge
#     G1 E-{unload_distance} F{max_velocity} # fast-unload
#     RESTORE_GCODE_STATE NAME=unload_state





######################################################################
# Miscellaneous
######################################################################


# [gcode_macro PARK]
# gcode:
#     {% set th = printer.toolhead %}
#     G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

# [gcode_macro G32]
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_G32
#     G90
#     G28
#     QUAD_GANTRY_LEVEL
#     G28
#     PARK
#     RESTORE_GCODE_STATE NAME=STATE_G32   


[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True    


######################################################################
# Personal Macros
######################################################################    

    
[gcode_macro PROBE_OFFSET_CALIBRATE] 
gcode:
  CALIBRATE_Z
  

[gcode_macro PID_AUTOTUNE_EXTRUDER_210]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=210
    

[gcode_macro PID_AUTOTUNE_EXTRUDER_230]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=230  
    

[gcode_macro PID_AUTOTUNE_EXTRUDER_255]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=255    
    

[gcode_macro PID_AUTOTUNE_BED_60]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=60


[gcode_macro PID_AUTOTUNE_BED_105]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=105    


[gcode_macro EXTRUDE_100]
description: Extrudes 100mm of filament to measure for e-step calibration
gcode:
  M104 S210             # set hot end temperature to 210°C
  M109 S210             # wait for hot end temperature to reach 210°C
  G28                   # Home all axis
  G1 Z50 F250           # Moves Z 50mm to give space for filament to extrude
  M83                   # set relative mode
  G1 F60                # set feedrate to 60mm/min
  G1 E100               # extrude 100mm of filament    


# [gcode_macro AB_BELT_TUNING_POS]
# description: Moves gantry to read AB belt frequency for tuning
# gcode:
#   G1 X175 Y105 Z100 F8000


[gcode_macro BELT_TUNING_POS]
description: Moves gantry to read belt frequency for tuning
gcode:
  G1 X175 Y105 Z220 F8000  


[gcode_macro EVEN_BELT_TENSION]
description: moves gantry to even tension on AB belt
gcode:
  G1 X10 Y10 Z100 F8500 
  G1 X340 Y300 Z100 F8500
  G1 X10 Y10 Z100 F8500 
  G1 X340 Y300 Z100 F8500
  G1 X10 Y10 Z100 F8500
  G1 X175 Y105 Z220 F8500
  

[gcode_macro FRONT_CENTER]
description: Moves gantry to the front at X center
gcode:
  G1 X175 Y10 Z100 F5000

[gcode_macro ABS_PRE]
description: heat pre-soak for ABS and clean nozzle possition
gcode:
  G90 X175 Y215 Z200 F5000
  M140 S105
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=195



[gcode_macro M191]
gcode:
    {% set s = params.S|float %}
    {% if s == 0 %}
        # If target temperature is 0, do nothing
        M117 Chamber heating cancelled
    {% else %}
        # SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={s}
        # Orca: uncomment the following line if you want to use heat bed to assist chamber heating
        M140 S100
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={s-1} MAXIMUM={s+1}
        M117 Chamber at target temperature
    {% endif %}
