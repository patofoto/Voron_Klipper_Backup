


[gcode_macro _CORE_VARS]

variable_orca_bed_offset: 0.00
variable_orca_surface: "High Temp Plate"
variable_filament: "PLA"

gcode:

#######################################################
# DEMON PRINT START ASSETS
#######################################################

[gcode_macro _BED_FANS_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.lo_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.pla_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.pla_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.pla_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.pla_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.pla_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      M400

    {% elif core_vars.filament == 'ASA' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.hi_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.asa_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.asa_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.asa_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.asa_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.asa_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      M400

    {% elif core_vars.filament == 'ABS' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.hi_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.abs_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.abs_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.abs_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.abs_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.abs_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      M400

    {% elif core_vars.filament in ['PET', 'PETG'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.lo_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.petg_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.petg_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.petg_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.petg_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.petg_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      M400

    {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.lo_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.tpu_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.tpu_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.tpu_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.tpu_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.tpu_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      M400

    {% else %}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.default_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.default_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.default_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.default_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.default_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.default_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      M400

    {% endif %}



[gcode_macro _START_WAIT_AND_TIMER_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  # {% set filament_type = printer["gcode_macro _CORE_VARS"].filament %}
  # {% set core_vars.filament = params.FILAMENT|default('PLA')|string %}
  
  {% if start_vars.chamber_fan or start_vars.chamber_sensor == True %} 
    {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %}
      {% if start_vars.chamber_fan == True %} ##
        {% if printer["temperature_fan chamber"].temperature <start_vars.lo_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            _Z_PARK                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={start_vars.lo_heat_soak_threshold|float -1}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
             _Z_PARK                        # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
          {% endif %} 

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          G4 P5000
        {% endif %} 

      {% elif start_vars.chamber_sensor == True %} ##  
        {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.lo_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            _Z_PARK                        # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.lo_heat_soak_threshold|float -1}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
             _Z_PARK                        # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
          {% endif %} 

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          G4 P5000
        {% endif %} 
      
      {% endif %}
      

    {% elif core_vars.filament in ['ASA', 'ABS'] %}
      {% if start_vars.chamber_fan == True %} ## 
        {% if printer["temperature_fan chamber"].temperature <start_vars.hi_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            _Z_PARK                        # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            # M106 S255 
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={start_vars.hi_heat_soak_threshold|float -1}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
            # M106 S255
            _Z_PARK                        # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
            RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
          {% endif %}  

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          G4 P5000
        {% endif %} 

      {% elif start_vars.chamber_sensor == True %} ##  
        {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.hi_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            _Z_PARK                        # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            # M106 S255 
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.hi_heat_soak_threshold|float -1}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
            # M106 S255
            _Z_PARK                        # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
            RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
          {% endif %}  

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          G4 P5000
        {% endif %} 

      {% endif %}
      
         
    {% else %}
      {% if start_vars.chamber_fan == True %} ## 
        {% if printer["temperature_fan chamber"].temperature <start_vars.default_heat_soak_threshold %}
          _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
          {% if start_vars.chamber_temp_wait == True %}
            _Z_PARK                        # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={start_vars.default_heat_soak_threshold|float -1} 
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
            
          {% elif start_vars.chamber_temp_wait == False %} 
            _Z_PARK                        # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"
          {% endif %}   
      
        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to Default temp heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          G4 P5000
        {% endif %}
 
      {% elif start_vars.chamber_sensor == True %} ## 
        {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.default_heat_soak_threshold %}
          _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
          {% if start_vars.chamber_temp_wait == True %}
            _Z_PARK                        # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.default_heat_soak_threshold|float -1} 
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
            
          {% elif start_vars.chamber_temp_wait == False %} 
            _Z_PARK                        # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"
          {% endif %}   
      
        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to Default temp heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
          G4 P5000
        {% endif %}
       
      {% endif %}

    {% endif %}

   {% else %}
  # {% elif start_vars.chamber_fan and start_vars.chamber_sensor == False %}

    {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %} 
      RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via Fliament Type"
      _Z_PARK                        # Goes to center of the bed
      _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}     
    
    {% elif core_vars.filament in ['ASA', 'ABS'] %}  
      RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via Fliament Type"
      _Z_PARK                        # Goes to center of the bed
      # M106 S255
      _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}  
       
    {% else %}
      {% if params.BED|float < 90 %}
        RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via File Temps"
        _Z_PARK                        # Goes to center of the bed 
        _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}

      {% else %}
        RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via File Temps"
        _Z_PARK                        # Goes to center of the bed
        # M106 S255
        _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
      {% endif %}
    
    {% endif %}
    
  {% endif %}

    M107                                                    # Turns off parts cooling fan



[gcode_macro _ORCA_MULTI_SURFACE_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set surface = printer["gcode_macro _CORE_VARS"].orca_surface %}
  # {% set surface = params.SURFACE|default('High Temp Plate')|string %}
  
 
  {% if start_vars.orca_multi_surface == True %}
    {% if surface == 'Cool Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_cool_plate}


      {% elif surface == 'High Temp Plate' %}
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_hi_temp_plate}
      
      {% elif surface == 'Textured PEI Plate' %}
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_textured_pei_plate}

      {% elif surface == 'Engineering Plate' %}
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_engineering_plate}
        
      {% endif %}
      
    {% endif %}



[gcode_macro _Z_OFFSET_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  # {% set filament_type = printer["gcode_macro _CORE_VARS"].filament %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  # {% set filament_type = params.FILAMENT|default('PLA')|string %} 

  {% if start_vars.orca_multi_surface == True and start_vars.combine_offset == True %}
    {% if core_vars.orca_bed_offset >= -0.165 and core_vars.orca_bed_offset <= 0.165 %}
      {% if core_vars.filament in ['PLA', 'PLA+'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=COMMAND MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1
          SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} offset adjustment"
          RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} offset adjustment"
          # SET_DISPLAY_TEXT MSG="REQUESTED BED TYPE & HIGH TEMP COMBINED OFFSET ADJUSTMENT APPLIED"
          # RESPOND TYPE=echo MSG="REQUESTED BED TYPE & HIGH TEMP COMBINED OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.high_temp_expansion_offset == True and core_vars.filament in ['ASA', 'ABS'] %}
        {% if start_vars.high_temp_offset >= -0.165 and start_vars.high_temp_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
            {% if (start_vars.high_temp_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.high_temp_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & High Temp combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & High Temp combined offset adjustment"
            {% else %}
              {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}    
          {% endif %} 
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000

      {% elif start_vars.petg_anti_squish == True and core_vars.filament in ['PET', 'PETG'] %}
        {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
            {% if (start_vars.petg_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.petg_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & PETG Anti Squish combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & PETG Anti Squish combined offset adjustment"
            {% else %}
             {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}  
          {% endif %}
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000

      {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
        {% if start_vars.tpu_offset >= 0.0 and start_vars.tpu_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
           {% if (start_vars.tpu_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.tpu_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & TPU Anti Squish combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & TPU Anti Squish combined offset adjustment"
            {% else %}
              {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}
            
          {% endif %}
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000  

      {% elif start_vars.high_temp_expansion_offset == False and core_vars.filament in ['ASA', 'ABS'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.petg_anti_squish == False and core_vars.filament in ['PET', 'PETG'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}
      {% endif %}

        
    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PLATE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    {% endif %} 


  {% elif start_vars.orca_multi_surface == True and start_vars.combine_offset == False %}
    {% if core_vars.orca_bed_offset >= -0.165 and core_vars.orca_bed_offset <= 0.165 %} 
      {% if core_vars.orca_bed_offset == 0.00 %}
        SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} SELECTED. NO OFFSET APPLIED"
        RESPOND TYPE=COMMAND MSG="BED TYPE: {core_vars.orca_surface} SELECTED. NO OFFSET APPLIED"
        G4 P10000 
      {% elif core_vars.orca_bed_offset != 0.00 %}
        SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1
        SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED" 
        G4 P10000 
      {% endif %} 
      
    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PLATE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    {% endif %} 


  
  {% elif start_vars.orca_multi_surface == False and start_vars.combine_offset == True %}
    {action_raise_error("This error is caused by variable_orca_multi_surface being set to False when combine_offset is set to True! Check demon_user_settings file!")}
    
  {% elif start_vars.orca_multi_surface == False and start_vars.combine_offset == False %}
  
    {% if start_vars.high_temp_expansion_offset == True and core_vars.filament in ['ASA', 'ABS'] %}
      {% if start_vars.high_temp_offset >= -0.165 and start_vars.high_temp_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
        G4 P10000

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}    

    {% elif start_vars.petg_anti_squish == True and core_vars.filament in ['PET', 'PETG'] %}
      {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
        G4 P10000

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}  

    {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
      {% if start_vars.tpu_offset >= 0.0 and start_vars.tpu_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
        G4 P10000   

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}  

    {% endif %}
  

  {% endif %}


[gcode_macro _PURGE_LINES]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set height = (printer.configfile.settings.extruder.nozzle_diameter * 0.75)|float %} #0.625
  {% set width = (printer.configfile.settings.extruder.nozzle_diameter * 1.25)|float %}
  {% set filament_area = 3.14159 * (printer.configfile.settings.extruder.filament_diameter ** 2) / 4 %}
  {% set rate = start_vars.purge_line_length * ((width * height) / filament_area) %}

    SET_DISPLAY_TEXT MSG="Printing Purge Lines"
    RESPOND TYPE=COMMAND MSG="Printing Purge Lines"
    G90  # Absolute mode
    G0 Z1.5 F9000 # Jump up to leave ooze blob

    G91 # Relative mode
  {% if start_vars.purge_along_y == True %}
    G0 Y7 F9000 # Move away from ooze blob
  {% else %}
    G0 X7 F9000
  {% endif %}

    G90 # Absolute mode
    G0 Z{height} F1500    
    G91 # Relative mode
    
  {% if start_vars.purge_along_y == True %} 
    G1 Y{start_vars.purge_line_length} E{rate} F600 # Draw the first line F1500
    G0 X{width} F5000 # Move to side a little
    G1 Y-{start_vars.purge_line_length -15} E{rate} F600
  # G4 P2000 # wait 02 seconds    

  {% else %}
    G1 X{start_vars.purge_line_length} E{rate} F600 # Draw the first line F1500
    G0 Y{width +0.4} F5000 # Move to side a little
    G1 X-{start_vars.purge_line_length -15} E{rate} F600
  # G4 P2000 # wait 02 seconds 
  {% endif %}

    G0 Z{height} F9000 # Lift a little
    G0 X5 Y5 F9000 # Wipe Out
    G90 # Absolute mode
    G92 E0.0 # Reset Extruder
    M83 # Extruder relative mode
    G0 Z5.0 F9000 # Move Z Axis up little to prevent scratching of Heat Bed
    M400
    SET_DISPLAY_TEXT MSG="Print Start..."
    RESPOND TYPE=COMMAND MSG="Print Start..."

  {% if start_vars.encoder_runout_sensor == True %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
  {% endif %}  



#######################################################
# If you have a power on/off relay 
# This macro is used to shutdown your printer after printing
# It is called by the END_PRINT macro
#######################################################

[gcode_macro _GOODNIGHT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    M106 S255 # max part fan to cool

    M117 Cooling Hotend....
    M109 S49 # reach temp
    M400 # wait
    M107 # kill fan
    M81 # printer power off

    M117 GOODNIGHT...Zzzzzz
    M118 GOODNIGHT...Zzzzzz
  {% if start_vars.neopixel_led == True %}
    STATUS_OFF
  {% endif %}
    



#######################################################
# SYSTEM MACROS DO NOT EDIT
#######################################################
#######################################################
# for use with Klicky Probe, in some rare instances the probe can
# be still attached with the steppers engaged & another print can be started
# without the Klicky Macros checking if the probe is still attached.
# this fixes that!
#######################################################

[gcode_macro _klicky_check]
gcode:
    query_probe
    _probe_state action={ params.ACTION }


[gcode_macro _probe_state]
gcode:
  {% set query_probe_triggered = printer.probe.last_query %}
  {% set action  = params.ACTION|default('') %}
  
  {% if query_probe_triggered %}

  {% else %}
    Dock_Probe_Unlock  
  {% endif %}



[gcode_macro _CONDITIONAL_HOME]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    _SET_Z_PARK
  {% if "xyz" not in printer.toolhead.homed_axes %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HOMING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Homing..."
    RESPOND TYPE=COMMAND MSG="Homing..."
    G28

  {% else %}
    {% if start_vars.klicky_probe == True %}
      _klicky_check
    {% endif %}
  {% endif %}
    M117
    M400

    

[gcode_macro _Z_PARK]
variable_z_park: 30
gcode:
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}
    # RESPOND TYPE=COMMAND MSG="z park is at {z_park}"
    G0 X{x_park} Y{y_park} Z{z_park} F10000



[gcode_macro _SET_Z_PARK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set zp_vars = printer["gcode_macro _z_park"] %}

  {% if start_vars.klicky_probe == True or printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop' %}
  # {% if start_vars.klicky_probe == True %}
    SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=50
  {% else %}
    SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=5
  {% endif %}



[gcode_macro _Z_RAISE]
variable_offset_reset: False
gcode:
  {% if printer.toolhead.position.z|float < 50 %}
    G0 Z50 F3600
  {% endif %}

  {% if offset_reset == True %}
    {% if printer.print_stats.state not in ['printing', 'paused'] %}
      SET_GCODE_OFFSET Z=0.0 MOVE=1 # Reset the adjusted G-Code Z offset
    {% endif %} 
  {% endif %} 

  {% if printer.print_stats.state not in ['printing', 'paused'] %}
    M220 S100 # reset feed rate to 100 percent
    M221 S100 # reset flow rate to 100 percent
  {% endif %}



[gcode_macro _RUNOUT_SENSOR_CHECK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.runout_sensor == True %}
    {% if printer['filament_switch_sensor filament_sensor'].enable == True %}
      {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %} # Runout Sensor Check, E-Stop if empty! 
        {action_raise_error("This error is caused by no being filament loaded! Please load filament & restart the print!")}
      {% endif %}
    {% else %}
      RESPOND TYPE=COMMAND MSG="Runout sensor disabled, filament check bypassed"
    {% endif %}
  {% endif %} 
  
  

#######################################################
  # DEMON CLEAN LOAD ASSETS
#######################################################

[gcode_macro _step_control]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set rando_x_clean = range((clean_vars.clean_min_x), (clean_vars.clean_max_x))|random %}
  {% set rando_y_clean = range((clean_vars.clean_min_y), (clean_vars.clean_max_y))|random %}
  
    G90
    G0 X{rando_x_clean} Y{rando_y_clean} F{clean_vars.pass_spd * 60}

        

[gcode_macro _random_spot]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set rando_x = range((clean_vars.purge_min_x), (clean_vars.purge_max_x))|random %}
  # {% set rando_x = range(302, 339)|random %}

    G0 X{rando_x} Y{clean_vars.purge_y_park} F9000



[gcode_macro PRINTER_STATUS]
gcode:
  {% if "xyz" != printer.toolhead.homed_axes%}
    RESPOND TYPE=COMMAND MSG="Homed Axes: None"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Homed Axes: {printer.toolhead.homed_axes}"
  {% endif %}
    
  {% if printer.print_stats.state == "standby" and printer.idle_timeout.state == "Printing" %}
   RESPOND TYPE=COMMAND MSG="Printer timeout state: Busy"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Printer timeout state: {printer.idle_timeout.state}"
  {% endif %}
    
    RESPOND TYPE=COMMAND MSG="Printer status: {printer.print_stats.state}"
    RESPOND TYPE=COMMAND MSG="Virtual SDcard is active: {printer.virtual_sdcard.is_active}"
  
  {% if printer.print_stats.state in ["printing", "paused"] %}
    RESPOND TYPE=COMMAND MSG="Virtual SDcard print progess in percent: {printer.virtual_sdcard.progress}"
    RESPOND TYPE=COMMAND MSG="File: {printer.print_stats.filename}"
    RESPOND TYPE=COMMAND MSG="Info: {printer.print_stats.info}"
    RESPOND TYPE=COMMAND MSG="{printer.print_stats.message}"
  {% endif %}

  
  
[gcode_macro SYSTEM_SENSORS]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(' | ')) }
  { action_respond_info(printer.heaters.available_sensors | join(' | ')) }   



[delayed_gcode _welcome]
initial_duration: 5
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    _DEMON_VERSION
  {% if printer.print_stats.state not in ['printing', 'paused'] %}
    SET_DISPLAY_TEXT MSG="{start_vars.screen_msg}"
    RESPOND TYPE=COMMAND MSG="{start_vars.console_msg}"
  {% endif %}
    


    
[gcode_macro _DEMON_VERSION_MISMATCH]
gcode:
    {action_raise_error("This error is caused by Demon_version mismatch please check and update your Demon Essentials Macro files!")}



[gcode_macro _DEMON_VERSION]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set clean_load_ver = printer["gcode_macro _CLEAN_LOAD_VERSION"] %}
  {% set setup_helpers_ver = printer["gcode_macro _SETUP_HELPERS_VERSION"] %}
  {% set z_cal_ver = printer["gcode_macro _Z_CALIBRATION_VERSION"] %}
  {% set prepare_menu_ver = printer["gcode_macro _PREPARE_MENU_VERSION"] %}
  {% set mesh_builder_ver = printer["gcode_macro _MESH_BUILDER_VERSION"] %}
  {% set pa_vars = printer["gcode_macro _PA_VERSION"] %}
  {% set bed_fans_ver = printer["gcode_macro _BED_FANS_VERSION"] %}
  {% set core_ver = printer["gcode_macro _CORE_VERSION"] %}
  {% set print_start_ver = printer["gcode_macro _PRINT_START_VERSION"] %}
  
  {% if not start_vars.demon_version|float == 2.7 %}
    M118 DEMON_USER_SETTINGS VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not clean_load_ver.demon_clean_load|float == 1.4 %}
    M118 DEMON_CLEAN_LOAD_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 

  {% elif not setup_helpers_ver.demon_setup|float == 1.4 %}
    M118 DEMON_SETUP_HELPERS_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not z_cal_ver.demon_z_cal|float == 1.4 %}
    M118 DEMON_ZC_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH   

  {% elif not prepare_menu_ver.demon_prepare_menu|float == 1.1 %}
    M118 DEMON_PREPARE_MENU_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not mesh_builder_ver.demon_mesh_builder|float == 1.1 %}
    M118 DEMON_MESH_BUILDER_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 
    
  {% elif not pa_vars.demon_apa|float == 1.0 %}
    M118 DEMON_PA_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 
    
  {% elif not bed_fans_ver.demon_bed_fans|float == 1.2 %}
    M118 DEMON_BED_FANS_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 

  {% elif not core_ver.demon_core_ver|float == 1.0 %}
    M118 DEMON_CORE_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not print_start_ver.demon_start_ver|float == 2.7 %}
    M118 DEMON_PRINT_START_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% else %}
    RESPOND TYPE=COMMAND MSG="PRINTER CHECK: PASSED"
    
  {% endif %}



[gcode_macro _CORE_VERSION]
variable_demon_core_ver: 1.0
gcode:


    
    
