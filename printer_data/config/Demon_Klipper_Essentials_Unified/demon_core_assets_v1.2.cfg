


[gcode_macro _CORE_VARS]

variable_orca_bed_offset: 0.00
variable_orca_surface: "High Temp Plate"
variable_filament: "PLA"
variable_layer: 0.2
variable_bed: 0
variable_chamber_thermal_sensor: 0
variable_heat_wait_temp: 10
gcode:

#######################################################
# DEMON PRINT START ASSETS
#######################################################


[gcode_macro _INITIAL_SETUP]
gcode:
   {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
   {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
   
    M220 S{start_vars.feed_rate}
 
  {% if core_vars.filament in ['PLA', 'PLA+'] and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.pla_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif core_vars.filament == 'ASA' and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.asa_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif core_vars.filament == 'ABS' and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.abs_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif core_vars.filament in ['PET', 'PETG'] and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.petg_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}   

  {% elif core_vars.filament in ['FLEX', 'TPU'] and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.tpu_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  

  {% elif core_vars.filament in ['PLA', 'PLA+'] and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.pla_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif core_vars.filament == 'ASA' and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.asa_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif core_vars.filament == 'ABS' and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.abs_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif core_vars.filament in ['PET', 'PETG'] and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.petg_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}
   
  {% elif core_vars.filament in ['FLEX', 'TPU'] and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.tpu_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  

  {% endif %}



[gcode_macro _CHAMBER_SENSOR_DEFINE]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
 
  {% if start_vars.chamber_fan and start_vars.chamber_sensor == True %}
    {action_raise_error("This error is caused by multiple chamber thermal sensors being set for use in the demon_user_settings file, please disable one sensor & restart the print!")} 

  {% elif ('temperature_sensor Chamber_Temp' not in printer.configfile.config) and ('temperature_fan chamber' not in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=chamber_thermal_sensor VALUE=3 
    
  {% elif ('temperature_fan chamber' in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=chamber_thermal_sensor VALUE=1

  {% elif ('temperature_sensor Chamber_Temp' in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=chamber_thermal_sensor VALUE=2
  
  {% endif %}


[gcode_macro _BED_FANS_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.pla_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.pla_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.pla_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.pla_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.pla_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.pla_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament == 'ASA' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.asa_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.asa_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.asa_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.asa_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.asa_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.asa_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament == 'ABS' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.abs_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.abs_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.abs_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.abs_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.abs_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.abs_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament in ['PET', 'PETG'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.petg_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.petg_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.petg_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.petg_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.petg_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.petg_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.tpu_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.tpu_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.tpu_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.tpu_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.tpu_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.tpu_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% else %}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.default_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.default_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.default_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.default_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.default_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.default_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% endif %}



[gcode_macro _CHAMBER_HEATER_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.pla_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.pla_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.pla_min_chamber_temp + start_vars.pla_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament == 'ASA' %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.asa_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.asa_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.asa_min_chamber_temp + start_vars.asa_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament == 'ABS' %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.abs_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.abs_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.abs_min_chamber_temp + start_vars.abs_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament in ['PET', 'PETG'] %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.petg_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.petg_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.petg_min_chamber_temp + start_vars.petg_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.tpu_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.tpu_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.tpu_min_chamber_temp + start_vars.tpu_max_chamber_temp) / 2|float}
      M400

    {% else %}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.default_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.default_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.default_min_chamber_temp + start_vars.default_max_chamber_temp) / 2|float}
      M400

    {% endif %}

[gcode_macro _CHAMBER_TEMPS_HELPER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.pla_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.pla_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PLA {start_vars.pla_max_chamber_temp}c"
    {% endif %}

  {% elif core_vars.filament == 'ASA' %}   
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.asa_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.asa_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ASA {start_vars.asa_max_chamber_temp}c"   
    {% endif %}
    
  {% elif core_vars.filament == 'ABS' %} 
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.abs_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.abs_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ABS {start_vars.abs_max_chamber_temp}c"   
    {% endif %}

  {% elif core_vars.filament in ['PET', 'PETG'] %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.petg_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.petg_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PETG {start_vars.petg_max_chamber_temp}c"   
    {% endif %}
    
  {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.tpu_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.tpu_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: TPU {start_vars.tpu_max_chamber_temp}c"   
    {% endif %}
    
  {% else %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.default_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.default_max_chamber_temp}  
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: Default {start_vars.default_max_chamber_temp}c"  
    {% endif %}
    
 {% endif %}

 

[gcode_macro _START_WAIT_AND_TIMER_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.chamber_thermal_sensor in [0, 3] %}
    {action_raise_error("This error is caused by no correctly named chamber_sensor or temperature controlled chamber_fan being available to the system! Check the system is setup correctly!")}   

  {% elif core_vars.chamber_thermal_sensor == 1 %}
    {% set thermal_sensor = printer["temperature_fan chamber"].temperature %}
    {% set wait_thermal_sensor = "temperature_fan chamber" %}

  {% elif core_vars.chamber_thermal_sensor == 2 %}
    {% set thermal_sensor = printer["temperature_sensor Chamber_Temp"].temperature %}
    {% set wait_thermal_sensor = "temperature_sensor Chamber_Temp" %}

  {% endif %}

  {% if start_vars.chamber_fan and start_vars.chamber_sensor == True %} 
    {action_raise_error("This error is caused by you setting both the chamber_fan & chamber_sensor to true. Check demon_user_settings file & set these correctly for your printer!")}
  {% endif %}

  {% if start_vars.chamber_fan or start_vars.chamber_sensor == True %} 
    {% if thermal_sensor <core_vars.heat_wait_temp %}
        
      {% if start_vars.chamber_temp_wait == True %}
        _Z_PARK                         # Goes to center of the bed
        SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {core_vars.heat_wait_temp}c"
        RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {core_vars.heat_wait_temp}c"
        TEMPERATURE_WAIT SENSOR="{wait_thermal_sensor}" MINIMUM={core_vars.heat_wait_temp|float -1}
        RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
      
      {% else %}
        _Z_PARK                        # Goes to center of the bed
        {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %}
          _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
          RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
        {% elif core_vars.filament in ['ASA', 'ABS'] %}
          _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
          RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
        {% else %}
          _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
          RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"
             
        {% endif %} 
      {% endif %}
      
    {% else %}
      SET_DISPLAY_TEXT MSG="Already up to {core_vars.filament} temp, heat soak skipped"
      RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
      G4 P5000
     
    {% endif %} 


  {% else %}

    {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %} 
      RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via Filament Type"
      _Z_PARK                        # Goes to center of the bed
      _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}     
    
    {% elif core_vars.filament in ['ASA', 'ABS'] %}  
      RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via Filament Type"
      _Z_PARK                        # Goes to center of the bed
      # M106 S255
      _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}  
       
    {% else %}
      {% if core_vars.bed < 90 %}
        RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via File Temps"
        _Z_PARK                        # Goes to center of the bed 
        _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}

      {% else %}
        RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via File Temps"
        _Z_PARK                        # Goes to center of the bed
        # M106 S255
        _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
      {% endif %}
    
    {% endif %}
    
  {% endif %}

    M107                                                    # Turns off parts cooling fan
   
 

[gcode_macro _ORCA_MULTI_SURFACE_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set surface = printer["gcode_macro _CORE_VARS"].orca_surface %}
  # {% set surface = params.SURFACE|default('High Temp Plate')|string %}
  
 
  {% if start_vars.orca_multi_surface == True %}
    {% if surface == 'Cool Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_cool_plate}

    {% elif surface == 'High Temp Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_hi_temp_plate}
      
    {% elif surface == 'Textured PEI Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_textured_pei_plate}

    {% elif surface == 'Engineering Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_engineering_plate}
        
    {% endif %}
      
  {% endif %}



[gcode_macro _Z_OFFSET_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  # {% set filament_type = printer["gcode_macro _CORE_VARS"].filament %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  # {% set filament_type = params.FILAMENT|default('PLA')|string %} 

  {% if start_vars.orca_multi_surface == True and start_vars.combine_offset == True %}
    {% if core_vars.orca_bed_offset >= -0.165 and core_vars.orca_bed_offset <= 0.165 %}
      {% if core_vars.filament in ['PLA', 'PLA+'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=COMMAND MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1
          SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} offset adjustment"
          RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} offset adjustment"
          # SET_DISPLAY_TEXT MSG="REQUESTED BED TYPE & HIGH TEMP COMBINED OFFSET ADJUSTMENT APPLIED"
          # RESPOND TYPE=echo MSG="REQUESTED BED TYPE & HIGH TEMP COMBINED OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.high_temp_expansion_offset == True and core_vars.filament in ['ASA', 'ABS'] %}
        {% if start_vars.high_temp_offset >= -0.165 and start_vars.high_temp_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
            {% if (start_vars.high_temp_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.high_temp_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & High Temp combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & High Temp combined offset adjustment"
            {% else %}
              {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}    
          {% endif %} 
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000

      {% elif start_vars.petg_anti_squish == True and core_vars.filament in ['PET', 'PETG'] %}
        {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
            {% if (start_vars.petg_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.petg_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & PETG Anti Squish combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & PETG Anti Squish combined offset adjustment"
            {% else %}
             {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}  
          {% endif %}
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000

      {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
        {% if start_vars.tpu_offset >= 0.0 and start_vars.tpu_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
           {% if (start_vars.tpu_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.tpu_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & TPU Anti Squish combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & TPU Anti Squish combined offset adjustment"
            {% else %}
              {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}
            
          {% endif %}
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000  

      {% elif start_vars.high_temp_expansion_offset == False and core_vars.filament in ['ASA', 'ABS'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.petg_anti_squish == False and core_vars.filament in ['PET', 'PETG'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}
      {% endif %}

        
    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PLATE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    {% endif %} 


  {% elif start_vars.orca_multi_surface == True and start_vars.combine_offset == False %}
    {% if core_vars.orca_bed_offset >= -0.165 and core_vars.orca_bed_offset <= 0.165 %} 
      {% if core_vars.orca_bed_offset == 0.00 %}
        SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} SELECTED. NO OFFSET APPLIED"
        RESPOND TYPE=COMMAND MSG="BED TYPE: {core_vars.orca_surface} SELECTED. NO OFFSET APPLIED"
        G4 P10000 
      {% elif core_vars.orca_bed_offset != 0.00 %}
        SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1
        SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED" 
        G4 P10000 
      {% endif %} 
      
    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PLATE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    {% endif %} 


  
  {% elif start_vars.orca_multi_surface == False and start_vars.combine_offset == True %}
    {action_raise_error("This error is caused by variable_orca_multi_surface being set to False when combine_offset is set to True! Check demon_user_settings file!")}
    
  {% elif start_vars.orca_multi_surface == False and start_vars.combine_offset == False %}
  
    {% if start_vars.high_temp_expansion_offset == True and core_vars.filament in ['ASA', 'ABS'] %}
      {% if start_vars.high_temp_offset >= -0.165 and start_vars.high_temp_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
        G4 P10000

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}    

    {% elif start_vars.petg_anti_squish == True and core_vars.filament in ['PET', 'PETG'] %}
      {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
        G4 P10000

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}  

    {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
      {% if start_vars.tpu_offset >= 0.0 and start_vars.tpu_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
        G4 P10000   

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}  

    {% endif %}
  
  {% endif %}

  

[gcode_macro _START_POS]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.start_x_position >= 50 or start_vars.start_y_position >= 50%}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE START POSITION REQUESTED CORRECT IN USER SETTINGS FILE")}

  {% elif start_vars.purge_line_length|float > 150 %}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PURGE LENGTH REQUESTED CORRECT IN USER SETTINGS FILE")}
    
  {% endif %}

    SET_DISPLAY_TEXT MSG="Moving to Start Position"
    RESPOND TYPE=COMMAND MSG="Moving to Start Position"
    G0 Z25 F5000
    G0 X{start_vars.start_x_position} Y{start_vars.start_y_position} F5000 # Move to start position

    
    G0 Z5.0 F5000 # Lower speed
    G0 Z0.5 F150 # Lower slow for wait & to catch oozing nozzle during heating

    

[gcode_macro _PURGE_LINES]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set height = (printer.configfile.settings.extruder.nozzle_diameter * 0.75)|float %} #0.625
  {% set width = (printer.configfile.settings.extruder.nozzle_diameter * 1.25)|float %}
  {% set filament_area = 3.14159 * (printer.configfile.settings.extruder.filament_diameter ** 2) / 4 %}
  {% set rate = start_vars.purge_line_length * ((width * height) / filament_area) %}

  {% if start_vars.purge_lines == False %}
    G0 Z5.0
    SET_DISPLAY_TEXT MSG="Purge lines skipped, Print Start..."
    RESPOND TYPE=COMMAND MSG="Purge lines skipped, Print Start..."

  {% elif start_vars.adaptive_meshing == true and start_vars.purge_lines == True %}
    LINE_PURGE

  {% elif start_vars.use_kamp_adaptive_purge == True and start_vars.purge_lines == True %}
    LINE_PURGE
    
  {% else %}
    SET_DISPLAY_TEXT MSG="Printing Purge Lines"
    RESPOND TYPE=COMMAND MSG="Printing Purge Lines"
    G90  # Absolute mode
    G0 Z1.5 F9000 # Jump up to leave ooze blob

    G91 # Relative mode
  {% if start_vars.purge_along_y == True %}
    G0 Y7 F9000 # Move away from ooze blob
  {% else %}
    G0 X7 F9000
  {% endif %}

    G90 # Absolute mode
    G0 Z{height} F1500    
    G91 # Relative mode
    
  {% if start_vars.purge_along_y == True %} 
    G1 Y{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 X{width} F5000 # Move to side a little
    G1 Y-{start_vars.purge_line_length -15} E{rate} F1500
    # G4 P2000 # wait 02 seconds    

  {% else %}
    G1 X{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 Y{width +0.4} F5000 # Move to side a little
    G1 X-{start_vars.purge_line_length -15} E{rate} F1500
    # G4 P2000 # wait 02 seconds 
  {% endif %}

    G0 Z{height} F9000 # Lift a little
    G4 P2000 # wait 02 seconds 
    G0 X5 Y5 F9000 # Wipe Out
    G90 # Absolute mode
    G92 E0.0 # Reset Extruder
    M83 # Extruder relative mode
    G0 Z5.0 F9000 # Move Z Axis up little to prevent scratching of Heat Bed
    M400
    SET_DISPLAY_TEXT MSG="Print Start..."
    RESPOND TYPE=COMMAND MSG="Print Start..."

 {% endif %}

  # {% if start_vars.encoder_runout_sensor == True %}
  #   SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
  # {% endif %}  



#######################################################
# If you have a power on/off relay 
# This macro is used to shutdown your printer after printing
# It is called by the END_PRINT macro
#######################################################

[gcode_macro _GOODNIGHT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    M106 S255 # max part fan to cool

    M117 Cooling Hotend....
    M109 S49 # reach temp
    M400 # wait
    M107 # kill fan
    M81 # printer power off

    M117 GOODNIGHT...Zzzzzz
    M118 GOODNIGHT...Zzzzzz
  {% if start_vars.neopixel_led == True %}
    STATUS_OFF
  {% endif %}


[gcode_macro Power_Down]
gcode:
 {action_call_remote_method("set_device_power",device="Printer Power",state="off")}

# [gcode_macro Power_Up]
# gcode:
#  {action_call_remote_method("set_device_power",device="Reset Power",state="on")}
#  {action_call_remote_method("set_device_power",device="Printer",state="on")}

[delayed_gcode _M81_Toggle]
gcode:
 {action_call_remote_method("set_device_power",device="Printer Power",state="on")}

[gcode_macro M81]
gcode:
 {action_call_remote_method("set_device_power",device="Printer Power",state="off")}


#######################################################
  # DEMON CLEAN LOAD ASSETS
#######################################################

[gcode_macro _CONDITIONAL_CLEAN]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.nozzle_cleaner == True %}
    {% if printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop' %}
      CLEAN_NOZZLE
    {% endif %}
  {% endif %}

  

[gcode_macro _step_control]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set rando_x_clean = range((clean_vars.clean_min_x), (clean_vars.clean_max_x))|random %}
  {% set rando_y_clean = range((clean_vars.clean_min_y), (clean_vars.clean_max_y))|random %}
  
    G90
    G0 X{rando_x_clean} Y{rando_y_clean} F{clean_vars.pass_spd * 60}

        

[gcode_macro _random_spot]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set rando_x = range((clean_vars.purge_min_x), (clean_vars.purge_max_x))|random %}

    G0 X{rando_x} Y{clean_vars.purge_y_park} F9000



#######################################################
# SYSTEM MACROS DO NOT EDIT
#######################################################
#######################################################
# for use with Klicky Probe, in some rare instances the probe can
# be still attached with the steppers engaged & another print can be started
# without the Klicky Macros checking if the probe is still attached.
# this fixes that!
#######################################################

[gcode_macro _klicky_check]
gcode:
    query_probe
    _probe_state action={ params.ACTION }


[gcode_macro _probe_state]
gcode:
  {% set query_probe_triggered = printer.probe.last_query %}
  {% set action  = params.ACTION|default('') %}
  
  {% if query_probe_triggered %}

  {% else %}
    Dock_Probe_Unlock  
  {% endif %}



[gcode_macro _KLICKY_UNLOCKER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.klicky_probe == True and printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop'%}
    RESPOND TYPE=COMMAND MSG="UNLOCKING Klicky Probe!"
    Dock_Probe_Unlock
  {% endif %}
  


[gcode_macro _HOMING_HELPER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.klicky_probe == True %}
      {% if printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
    #   {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
        _SET_Z_PARK
        {% if "xyz" not in printer.toolhead.homed_axes %}
          {% if start_vars.neopixel_led == True %}
            STATUS_HOMING
          {% endif %}
    
          SET_DISPLAY_TEXT MSG="Homing..."
          RESPOND TYPE=COMMAND MSG="Homing..."
          G28 X Y
          ATTACH_PROBE_LOCK
          RESPOND TYPE=COMMAND MSG="Klicky Probe is now LOCKED!"
          G28 Z
        {% endif %}
        
      {% else %}
        _CONDITIONAL_HOME
      {% endif %}
       
    {% else %}   
      _CONDITIONAL_HOME
    {% endif %}
  


[gcode_macro _CONDITIONAL_HOME]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    _SET_Z_PARK
  {% if "xyz" not in printer.toolhead.homed_axes %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HOMING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Homing..."
    RESPOND TYPE=COMMAND MSG="Homing..."
  
    G28

  {% else %}
    {% if start_vars.klicky_probe == True %}
      _klicky_check
    {% endif %}
  {% endif %}
    M117
    M400
    
    

[gcode_macro _Z_PARK]
variable_z_park: 30
gcode:
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.klicky_probe == True and printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop'%}
    Dock_Probe_Unlock
  {% endif %}
    # RESPOND TYPE=COMMAND MSG="z park is at {z_park}"
    G0 X{x_park} Y{y_park} Z{z_park} F10000



[gcode_macro _SET_Z_PARK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set zp_vars = printer["gcode_macro _z_park"] %}
 
  {% if ('bltouch' in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=25

  {% elif start_vars.klicky_probe == True or printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop' %}
    SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=50

  {% else %}
    SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=5
  {% endif %}




[gcode_macro _ADAPTIVE_MANUAL_LEVELLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.use_manual_levelling == True and ('bed_screws' in printer.configfile.config) and ('screws_tilt_adjust' not in printer.configfile.config) %}
    SET_DISPLAY_TEXT MSG="Manual Gantry Levelling: Bed Screws" 
    RESPOND TYPE=COMMAND MSG="Manual Gantry Levelling: Bed Screws" 
    {% if start_vars.neopixel_led == True %}
      STATUS_LEVELING
    {% endif %}
    BED_SCREWS_ADJUST 

  {% elif start_vars.use_manual_levelling == True and ('screws_tilt_adjust' in printer.configfile.config) %}
    SET_DISPLAY_TEXT MSG="Manual Gantry Levelling: Screws Tilt Calculate" 
    RESPOND TYPE=COMMAND MSG="Manual Gantry Levelling: Screws Tilt Calculate" 
    {% if start_vars.neopixel_led == True %}
      STATUS_LEVELING
    {% endif %}
    SCREWS_TILT_CALCULATE 

  {% else %}
    {action_raise_error("This error is caused by your printer not having bed_screws or screws_tilt_adjust defined! Please define these sections in the printer.cfg file")}
      
  {% endif %}
    M117



[gcode_macro _ADAPTIVE_LEVELLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.use_manual_levelling == True %}
    SET_DISPLAY_TEXT MSG="Manaul levelling in use, Print_Start auto levelling bypassed"
    RESPOND TYPE=COMMAND MSG="Manaul levelling in use, Print_Start auto levelling bypassed"

  {% else %}
    {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
      SET_DISPLAY_TEXT MSG="Gantry Levelling" 
      RESPOND TYPE=COMMAND MSG="Gantry Levelling" 
      {% if start_vars.neopixel_led == True %}
        STATUS_LEVELING
      {% endif %}
      QUAD_GANTRY_LEVEL 
      M400
    
    {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
      SET_DISPLAY_TEXT MSG="Gantry Levelling" 
      RESPOND TYPE=COMMAND MSG="Gantry Levelling"  
      {% if start_vars.neopixel_led == True %}
        STATUS_LEVELING
      {% endif %}
      Z_TILT_ADJUST
      M400
      
    {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' not in printer.configfile.config) %}
      RESPOND TYPE=COMMAND MSG="Levelling system not available, skipping Gantry Levelling"
    
    {% endif %}
  {% endif %}
    M117

[gcode_macro _Z_RAISE]
variable_offset_reset: False
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if printer.toolhead.position.z|float < 50 %}
    G0 Z50 F3600
  {% endif %}

  {% if offset_reset == True %}
    {% if printer.print_stats.state == 'cancelled' %} #not in ['printing', 'paused'] %}
      SET_GCODE_OFFSET Z=0.0 MOVE=1 # Reset the adjusted G-Code Z offset
    {% endif %} 
  {% endif %} 

  {% if printer.print_stats.state == 'cancelled' %} #not in ['printing', 'paused'] %}
    M84 
    CLEAR_BED_MESH
    M220 S100 # reset feed rate to 100 percent
    M221 S100 # reset flow rate to 100 percent
    {% if start_vars.encoder_runout_sensor == True %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}
  {% endif %}



[gcode_macro _MAX_EXTRUDE_CHECK]
gcode:
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}

  {% if ('max_extrude_only_velocity' not in printer.configfile.settings.extruder) %}
    {action_raise_error("Please set a mm per second max_extrude_only_velocity in your printer.cfg [extruder] section. e.g. max_extrude_only_velocity: 12")}
  
  {% elif max_velocity > 1260 %}
    {action_raise_error("WARNING! Your printer's max_extrude_only_velocity setting is too high! The operation has been cancelled to prevent damage to your extruder! Reset to a value below 20mm/s in your printer.cfg [extruder] section")}

  {% endif %}



[gcode_macro _RUNOUT_SENSOR_CHECK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.runout_sensor == True %}
    {% if printer['filament_switch_sensor filament_sensor'].enabled == 1 %}
      {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %} # Runout Sensor Check, E-Stop if empty! 
        {action_raise_error("This error is caused by no being filament loaded! Please load filament & restart the print!")}
      {% else %}
        RESPOND TYPE=COMMAND MSG="Runout sensor: Enabled, filament check passed"
      {% endif %}
    
    {% elif printer['filament_switch_sensor filament_sensor'].enabled != 1 %}
      RESPOND TYPE=COMMAND MSG="Runout sensor: Disabled, filament check skipped"
    {% endif %} 
  {% endif %}



[gcode_macro _ENCODER_FEED_CHECK_PREP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.encoder_runout_sensor == True %}
      {% if printer['filament_motion_sensor encoder_sensor'].enabled != 1 %}
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
      {% endif %} 
    {% endif %}


[gcode_macro _ENCODER_FEED_CHECK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.encoder_runout_sensor == True %}
      {% if not printer["filament_motion_sensor encoder_sensor"].filament_detected %} # Runout Sensor Check, stop if empty! 
        {% if printer.print_stats.state == "paused" %}
          RESPOND TYPE=error MSG="Encoder filament sensor triggered! This error is caused by the filament not being taken up by the extruder, or the nozzle is clogged! Please check filament state & try again!"
        {% else %}
          {action_raise_error("Encoder filament sensor triggered! This error is caused by the filament not being taken up by the extruder, or the nozzle is clogged! Please check filament state & try again!")}
        {% endif %}      
      {% endif %}
      
      UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=5
    {% endif %}
     
  

[delayed_gcode _ENCODER_RUNOUT_CONTROL]
gcode:

  {% if printer.print_stats.state not in ['printing', 'paused'] %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=0

  {% elif printer.print_stats.state in ['printing', 'paused'] %}
      # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% if printer.print_stats.info.current_layer in range(0, 2) %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
      UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=10 
    {% else %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
      UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=0
      RESPOND TYPE=COMMAND MSG="Layer 1 complete, encoder runout sensor enabled"
    {% endif %}
  {% endif %}




[gcode_macro PRINTER_STATUS]
gcode:
  {% if "xyz" != printer.toolhead.homed_axes%}
    RESPOND TYPE=COMMAND MSG="Homed Axes: None"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Homed Axes: {printer.toolhead.homed_axes}"
  {% endif %}
    
  {% if printer.print_stats.state == "standby" and printer.idle_timeout.state == "Printing" %}
   RESPOND TYPE=COMMAND MSG="Printer timeout state: Busy"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Printer timeout state: {printer.idle_timeout.state}"
  {% endif %}
    
    RESPOND TYPE=COMMAND MSG="Printer status: {printer.print_stats.state}"
    RESPOND TYPE=COMMAND MSG="Virtual SDcard is active: {printer.virtual_sdcard.is_active}"
  
  {% if printer.print_stats.state in ["printing", "paused"] %}
    RESPOND TYPE=COMMAND MSG="Virtual SDcard print progess in percent: {printer.virtual_sdcard.progress}"
    RESPOND TYPE=COMMAND MSG="File: {printer.print_stats.filename}"
    RESPOND TYPE=COMMAND MSG="Info: {printer.print_stats.info}"
    RESPOND TYPE=COMMAND MSG="{printer.print_stats.message}"
  {% endif %}

  
  
[gcode_macro SYSTEM_SENSORS]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(' | ')) }
  { action_respond_info(printer.heaters.available_sensors | join(' | ')) }   



[delayed_gcode _welcome]
initial_duration: 5
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    _DEMON_VERSION
  {% if printer.print_stats.state not in ['printing', 'paused'] %}
    SET_DISPLAY_TEXT MSG="{start_vars.screen_msg}"
    RESPOND TYPE=COMMAND MSG="{start_vars.console_msg}"
  {% endif %}
    


    
[gcode_macro _DEMON_VERSION_MISMATCH]
gcode:
    {action_raise_error("This error is caused by Demon_version mismatch please check and update your Demon Essentials Macro files!")}



[gcode_macro _DEMON_VERSION]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set clean_load_ver = printer["gcode_macro _CLEAN_LOAD_VERSION"] %}
  {% set setup_helpers_ver = printer["gcode_macro _SETUP_HELPERS_VERSION"] %}
  {% set z_cal_ver = printer["gcode_macro _Z_CALIBRATION_VERSION"] %}
  {% set prepare_menu_ver = printer["gcode_macro _PREPARE_MENU_VERSION"] %}
  {% set mesh_builder_ver = printer["gcode_macro _MESH_BUILDER_VERSION"] %}
  {% set pa_vars = printer["gcode_macro _PA_VERSION"] %}
  {% set bed_fans_ver = printer["gcode_macro _BED_FANS_VERSION"] %}
  {% set core_ver = printer["gcode_macro _CORE_VERSION"] %}
  {% set print_start_ver = printer["gcode_macro _PRINT_START_VERSION"] %}
  {% set chamber_heater_ver = printer["gcode_macro _CHAMBER_HEATER_VERSION"] %}
  {% set aes_ver = printer["gcode_macro _AES_VERSION"] %}
  
  {% if not start_vars.demon_version|float == 2.8 %}
    M118 DEMON_USER_SETTINGS VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not clean_load_ver.demon_clean_load|float == 1.6 %}
    M118 DEMON_CLEAN_LOAD_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 

  {% elif not setup_helpers_ver.demon_setup|float == 1.4 %}
    M118 DEMON_SETUP_HELPERS_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not z_cal_ver.demon_z_cal|float == 1.5 %}
    M118 DEMON_ZC_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH   

  {% elif not prepare_menu_ver.demon_prepare_menu|float == 1.1 %}
    M118 DEMON_PREPARE_MENU_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not mesh_builder_ver.demon_mesh_builder|float == 1.3 %}
    M118 DEMON_MESH_BUILDER_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 
    
  {% elif not pa_vars.demon_apa|float == 1.1 %}
    M118 DEMON_PA_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 
    
  {% elif not bed_fans_ver.demon_bed_fans|float == 1.3 %}
    M118 DEMON_BED_FANS_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH 

  {% elif not core_ver.demon_core_ver|float == 1.2 %}
    M118 DEMON_CORE_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not print_start_ver.demon_start_ver|float == 2.8 %}
    M118 DEMON_PRINT_START_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not chamber_heater_ver.demon_chamber_heater_ver|float == 1.0 %}
    M118 DEMON_CHAMBER_HEATER_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% elif not aes_ver.demon_aes_ver|float == 1.1 %}
    M118 DEMON_AES_VERSION_MISMATCH
    _DEMON_VERSION_MISMATCH

  {% else %}
    RESPOND TYPE=COMMAND MSG="PRINTER CHECK: PASSED"
    
  {% endif %}



[gcode_macro _CORE_VERSION]
variable_demon_core_ver: 1.2
gcode:


    
    
