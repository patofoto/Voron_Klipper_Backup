###################################################
#######>>>>>>>>>>  3DPrintDemon  <<<<<<<<<<<#######
#######   https://github.com/3DPrintDemon   #######

# IF YOU USE & LIKE THESE MACROS PLEASE CONSIDER SUPPORTING MY EFFORTS AT 
# https://www.buymeacoffee.com/3dprintdemon 

[gcode_macro MACHINE_LEVEL_COLD]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    
    # _CONDITIONAL_HOME
    _HOMING_HELPER
  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}

  {% if start_vars.use_manual_levelling == True %}
    _ADAPTIVE_MANUAL_LEVELLING

  {% else %}
    {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
      QUAD_GANTRY_LEVEL
    {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
      Z_TILT_ADJUST
    {% else %}
      {action_raise_error("This error is caused by your printer not supporting this feature! Please enable Manual Levelling in the demon_user_settings.cfg file")}
    {% endif %}  

    _Z_PARK

  {% endif %}
  
  {% if start_vars.neopixel_led == True %}
    STATUS_READY
  {% endif %}
  


[gcode_macro MACHINE_LEVEL_HOT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set z_cali_vars = printer["gcode_macro _Z_CALIBRATION_VARIABLES"] %}
  {% set bed_temp = params.BED_TEMP|default(60)|float %} #<<<<<<<<<<<<<<<<<<<< Edit default bed test temp (60)

    G90 # Use absoulte coordinates
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       #  Clears loaded mesh if any
  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}
    
    M117 HEATING...
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    
  {% if start_vars.klicky_probe == True %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={z_cali_vars.noz_pre_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={z_cali_vars.noz_pre_temp - 5} MAXIMUM={z_cali_vars.noz_pre_temp + 5}
  {% endif %}
  
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp|int -2} MAXIMUM={bed_temp|int + 5}
   
    # _CONDITIONAL_HOME
    _HOMING_HELPER
  {% if start_vars.nozzle_cleaner == True %}
    CLEAN_NOZZLE
  {% endif %}
    G28 Z
    M104 S0 # kill extruder temperature
    # STATUS_BUSY
  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}
    
  # {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
  #   QUAD_GANTRY_LEVEL
  # {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
  #   Z_TILT_ADJUST
  # {% endif %} 
  {% if start_vars.use_manual_levelling == True %}
    _ADAPTIVE_MANUAL_LEVELLING

  {% else %}
    _ADAPTIVE_LEVELLING

  {% endif %}
  
    _Z_PARK
    
  {% if start_vars.neopixel_led == True %}
    STATUS_READY
  {% endif %}  



[gcode_macro Z_Switch_Calibrate_Cold]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

##################################################################
 
  {% if start_vars.klicky_probe == False or printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
  # {% if start_vars.klicky_probe != True %}
    {action_raise_error("This error is caused by your printer not having a Z endstop switch, enable klicky_probe in user settings & define the pin if you have a Z endstop switch")}
  {% else %}
   M117 IMPORTANT! Ensure your nozzle is perfectly clean from filament!
   M118 IMPORTANT! Ensure your nozzle is perfectly clean from filament!

  {% if start_vars.neopixel_led == True %}
    STATUS_BUSY
  {% endif %}
  
   G90 # Use absoulte coordinates
   SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
   BED_MESH_CLEAR       # Clears loaded mesh if any

   # _CONDITIONAL_HOME  
   _HOMING_HELPER
  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}
   
   M117 Gantry Levelling     

  # {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
  #   QUAD_GANTRY_LEVEL
  # {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
  #   Z_TILT_ADJUST
  # {% endif %}  
  #  M117
   _ADAPTIVE_LEVELLING
   _Z_PARK
   M117 Time to get that piece of paper!
 
  {% if start_vars.neopixel_led == True %}
    STATUS_CALIBRATING_Z
  {% endif %}
   
   Z_ENDSTOP_CALIBRATE
 {% endif %}   

    

[gcode_macro Z_Switch_Calibrate_Hot]
gcode:

  {% set z_cali_vars = printer["gcode_macro _Z_CALIBRATION_VARIABLES"] %}
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set noz_temp = params.NOZZLE_TEMP|default(200)|float %} #<<<<<<<<<<<<<<<<<<< Edit default nozzle test temp (200)
  {% set bed_temp = params.BED_TEMP|default(60)|float %} #<<<<<<<<<<<<<<<<<<<< Edit default bed test temp (60)
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

##################################################################

  {% if start_vars.klicky_probe == False or printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
    {action_raise_error("This error is caused by your printer not having a Z endstop switch, enable klicky_probe in user settings & define the pin if you have a Z endstop switch")}
  {% else %}
    {% if start_vars.neopixel_led == True %}
      STATUS_BUSY
    {% endif %} 
   
    G90 # Use absoulte coordinates
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       #  Clears loaded mesh if any
   
  {% if start_vars.klicky_probe == True %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
      SET_DISPLAY_TEXT MSG="Hotend Preheat: {z_cali_vars.noz_pre_temp}c"
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={z_cali_vars.noz_pre_temp}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={z_cali_vars.noz_pre_temp - 5} MAXIMUM={z_cali_vars.noz_pre_temp + 5}
  {% endif %}

    # _CONDITIONAL_HOME
    _HOMING_HELPER
    
    M117 HEATING PRINTER! PLEASE WAIT!
  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}
 
    M190 S{bed_temp}

  {% if start_vars.chamber_fan == True %}
    {% if printer["temperature_fan chamber"].temperature <z_cali_vars.heat_soak_threshold %}
      _Z_PARK                    # Goes to center of the bed
      _HEAT_WAIT MINUTES={z_cali_vars.heat_soak_timer}
    {% endif %} #<<<<<< Comment out if you do not have a Chamber temp sensor!

  {% elif start_vars.chamber_sensor == True %}
    {% if printer["temperature_sensor Chamber_Temp"].temperature <z_cali_vars.heat_soak_threshold %} 
      _Z_PARK                    # Goes to center of the bed
      _HEAT_WAIT MINUTES={z_cali_vars.heat_soak_timer}
    {% endif %}

  {% else %}
    _Z_PARK                    # Goes to center of the bed
      _HEAT_WAIT MINUTES={z_cali_vars.heat_soak_timer}

  {% endif %}

    M117 Heating Nozzle
    M109 S{noz_temp}

    _CONDITIONAL_CLEAN
  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}
 
  #   M117 Gantry Levelling     

  #    {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
  #   QUAD_GANTRY_LEVEL
  # {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
  #   Z_TILT_ADJUST
  # {% endif %}  
  #   M117
  _ADAPTIVE_LEVELLING
    
  {% if start_vars.nozzle_cleaner == True %}
    CLEAN_NOZZLE
  {% endif %}
    _Z_PARK
    M117 Time to get that piece of paper!

  {% if start_vars.neopixel_led == True %}
    STATUS_CALIBRATING_Z
  {% endif %}
    
    Z_ENDSTOP_CALIBRATE
  {% endif %}



[gcode_macro Z_Probe_Calibrate_Cold]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

##################################################################

   M117 IMPORTANT! Ensure your nozzle is perfectly clean from filament!
   M118 IMPORTANT! Ensure your nozzle is perfectly clean from filament!

  {% if start_vars.neopixel_led == True %}
    STATUS_BUSY
  {% endif %}
   
    G90 # Use absoulte coordinates
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears loaded mesh if any

    # _CONDITIONAL_HOME 
    _HOMING_HELPER

  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}
   
  #   SET_DISPLAY_TEXT MSG="Gantry Levelling"
  #   RESPOND TYPE=echo MSG="Gantry Levelling"
  #   # M117 Gantry Levelling     

  # {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
  #   QUAD_GANTRY_LEVEL
  # {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
  #   Z_TILT_ADJUST
  # {% endif %}  
  #   M117

    _ADAPTIVE_LEVELLING
    _Z_PARK
    SET_DISPLAY_TEXT MSG="Time to get that piece of paper!"
    RESPOND TYPE=echo MSG="Time to get that piece of paper!"
    # M117 Time to get that piece of paper!
   
  {% if start_vars.neopixel_led == True %}
    STATUS_CALIBRATING_Z
  {% endif %}
   
    PROBE_CALIBRATE



[gcode_macro Z_Probe_Calibrate_Hot]
gcode:

  {% set z_cali_vars = printer["gcode_macro _Z_CALIBRATION_VARIABLES"] %}
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set noz_temp = params.NOZZLE_TEMP|default(200)|float %} #<<<<<<<<<<<<<<<<<<< Edit default nozzle test temp
  {% set bed_temp = params.BED_TEMP|default(60)|float %} #<<<<<<<<<<<<<<<<<<<< Edit default bed test temp
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

##################################################################

  {% if start_vars.neopixel_led == True %}
    STATUS_BUSY
  {% endif %}   
   
    G90 # Use absoulte coordinates
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears loaded mesh if any
   
  {% if start_vars.klicky_probe == True %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Hotend Preheat: {z_cali_vars.noz_pre_temp}c"
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={z_cali_vars.noz_pre_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={z_cali_vars.noz_pre_temp - 5} MAXIMUM={z_cali_vars.noz_pre_temp + 5}
  {% endif %}

    # _CONDITIONAL_HOME
    _HOMING_HELPER
    
    SET_DISPLAY_TEXT MSG="HEATING PLEASE WAIT"
    RESPOND TYPE=echo MSG="HEATING PLEASE WAIT"
  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}
    
   
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp|int -2} MAXIMUM={bed_temp|int + 5}

  {% if start_vars.chamber_fan == True %}
    {% if printer["temperature_fan chamber"].temperature <z_cali_vars.heat_soak_threshold %} 
      _Z_PARK                    # Goes to center of the bed
      _HEAT_WAIT MINUTES={z_cali_vars.heat_soak_timer}
    {% endif %} #<<<<<< Comment out if you do not have a Chamber temp sensor!

  {% elif start_vars.chamber_sensor == True %}
    {% if printer["temperature_sensor Chamber_Temp"].temperature <z_cali_vars.heat_soak_threshold %} 
      _Z_PARK                    # Goes to center of the bed
      _HEAT_WAIT MINUTES={z_cali_vars.heat_soak_timer}
    {% endif %}

  {% else %}
    _Z_PARK                    # Goes to center of the bed
      _HEAT_WAIT MINUTES={z_cali_vars.heat_soak_timer}

  {% endif %}

    M117 Heating Nozzle
    M109 S{noz_temp}

  # {% if start_vars.nozzle_cleaner == True %}
  #   CLEAN_NOZZLE
  # {% endif %}
    _CONDITIONAL_CLEAN
  
  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}  
    
  #   SET_DISPLAY_TEXT MSG="Gantry Levelling"
  #   RESPOND TYPE=echo MSG="Gantry Levelling"

  # {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
  #   QUAD_GANTRY_LEVEL
  # {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
  #   Z_TILT_ADJUST
  # {% endif %}  
  #   M117
    _ADAPTIVE_LEVELLING

    SET_DISPLAY_TEXT MSG="Heating Nozzle"
    RESPOND TYPE=echo MSG="Heating Nozzle"
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={noz_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={noz_temp - 5} MAXIMUM={noz_temp + 5}
   
  {% if start_vars.nozzle_cleaner == True %}
    CLEAN_NOZZLE
  {% endif %}
    _Z_PARK
   
    SET_DISPLAY_TEXT MSG="Time to get that piece of paper!"
    RESPOND TYPE=echo MSG="Time to get that piece of paper!"

  {% if start_vars.neopixel_led == True %}
    STATUS_CALIBRATING_Z
  {% endif %}
    
    PROBE_CALIBRATE




[gcode_macro Z_Probe_Accuracy_Cold]
gcode:

    _CONDITIONAL_HOME
  {% if printer.toolhead.position.z|float < 20 %}
     G0 Z20 F3600
  {% endif %}
    _Z_PARK
    PROBE_ACCURACY

    

[gcode_macro Z_Probe_Accuracy_Hot]
gcode:
  {% set z_cali_vars = printer["gcode_macro _Z_CALIBRATION_VARIABLES"] %}
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set temp = params.TEMP|default(60)|float %}

    G90
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears loaded mesh if any
    
  {% if start_vars.klicky_probe == True %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Hotend Preheat: {z_cali_vars.noz_pre_temp}c"
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={z_cali_vars.noz_pre_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={z_cali_vars.noz_pre_temp - 5} MAXIMUM={z_cali_vars.noz_pre_temp + 5}
  {% endif %}
    
    _CONDITIONAL_HOME
  {% if printer.toolhead.position.z|float < 20 %}
     G0 Z20 F3600
  {% endif %}

  {% if start_vars.klicky_probe == True %}  
    M104 S0 # kill extruder temperature
  {% endif %}
    
    _Z_PARK                    # Goes to center of the bed
  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}  
    
    SET_DISPLAY_TEXT MSG="HEATING PLEASE WAIT"
    RESPOND TYPE=echo MSG="HEATING PLEASE WAIT"
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={temp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp - 5} MAXIMUM={temp + 5}
  {% if start_vars.neopixel_led == True %}
    STATUS_BUSY
  {% endif %}
    
    
  {% if start_vars.chamber_sensor == True %}    
    _WAIT_HANDLING_LOW_TEMP
  {% else %}
    _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
  {% endif %} 
    
    PROBE_ACCURACY
  {% if start_vars.neopixel_led == True %}
    STATUS_READY
  {% endif %}


   

[gcode_macro _Z_CALIBRATION_VERSION]
variable_demon_z_cal: 1.5
gcode:






